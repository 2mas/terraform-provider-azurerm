package machinelearningservices

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"github.com/gofrs/uuid"
	"net/http"
)

// ExperimentsClient is the these APIs allow end users to manage Azure Machine Learning Services.
type ExperimentsClient struct {
	BaseClient
}

// NewExperimentsClient creates an instance of the ExperimentsClient client.
func NewExperimentsClient() ExperimentsClient {
	return NewExperimentsClientWithBaseURI(DefaultBaseURI)
}

// NewExperimentsClientWithBaseURI creates an instance of the ExperimentsClient client using a custom endpoint.  Use
// this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewExperimentsClientWithBaseURI(baseURI string) ExperimentsClient {
	return ExperimentsClient{NewWithBaseURI(baseURI)}
}

// Create create a new Experiment.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroupName - the Name of the resource group in which the workspace is located.
// workspaceName - the name of the workspace.
// experimentName - the experiment name.
func (client ExperimentsClient) Create(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string) (result Experiment, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ExperimentsClient.Create")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CreatePreparer(ctx, subscriptionID, resourceGroupName, workspaceName, experimentName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "Create", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "Create", resp, "Failure sending request")
		return
	}

	result, err = client.CreateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "Create", resp, "Failure responding to request")
		return
	}

	return
}

// CreatePreparer prepares the Create request.
func (client ExperimentsClient) CreatePreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"experimentName":    autorest.Encode("path", experimentName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client ExperimentsClient) CreateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client ExperimentsClient) CreateResponder(resp *http.Response) (result Experiment, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteTags delete list of Tags from a specific Experiment Id.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroupName - the Name of the resource group in which the workspace is located.
// workspaceName - the name of the workspace.
// experimentID - the identifier of the experiment.
// tags - the requested tags list to be deleted.
func (client ExperimentsClient) DeleteTags(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentID string, tags *DeleteTagsCommand) (result Experiment, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ExperimentsClient.DeleteTags")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeleteTagsPreparer(ctx, subscriptionID, resourceGroupName, workspaceName, experimentID, tags)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "DeleteTags", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteTagsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "DeleteTags", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteTagsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "DeleteTags", resp, "Failure responding to request")
		return
	}

	return
}

// DeleteTagsPreparer prepares the DeleteTags request.
func (client ExperimentsClient) DeleteTagsPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentID string, tags *DeleteTagsCommand) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"experimentId":      autorest.Encode("path", experimentID),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experimentids/{experimentId}/tags", pathParameters))
	if tags != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(tags))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteTagsSender sends the DeleteTags request. The method will close the
// http.Response Body if it receives an error.
func (client ExperimentsClient) DeleteTagsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteTagsResponder handles the response to the DeleteTags request. The method always
// closes the http.Response Body.
func (client ExperimentsClient) DeleteTagsResponder(resp *http.Response) (result Experiment, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get get details of an Experiment with specific Experiment name.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroupName - the Name of the resource group in which the workspace is located.
// workspaceName - the name of the workspace.
// experimentName - the experiment name.
func (client ExperimentsClient) Get(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string) (result Experiment, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ExperimentsClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPreparer(ctx, subscriptionID, resourceGroupName, workspaceName, experimentName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client ExperimentsClient) GetPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"experimentName":    autorest.Encode("path", experimentName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client ExperimentsClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client ExperimentsClient) GetResponder(resp *http.Response) (result Experiment, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetByID get details of an Experiment with specific Experiment Id.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroupName - the Name of the resource group in which the workspace is located.
// workspaceName - the name of the workspace.
// experimentID - the identifier of the experiment.
func (client ExperimentsClient) GetByID(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentID string) (result Experiment, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ExperimentsClient.GetByID")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetByIDPreparer(ctx, subscriptionID, resourceGroupName, workspaceName, experimentID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "GetByID", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetByIDSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "GetByID", resp, "Failure sending request")
		return
	}

	result, err = client.GetByIDResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "GetByID", resp, "Failure responding to request")
		return
	}

	return
}

// GetByIDPreparer prepares the GetByID request.
func (client ExperimentsClient) GetByIDPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"experimentId":      autorest.Encode("path", experimentID),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experimentids/{experimentId}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetByIDSender sends the GetByID request. The method will close the
// http.Response Body if it receives an error.
func (client ExperimentsClient) GetByIDSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetByIDResponder handles the response to the GetByID request. The method always
// closes the http.Response Body.
func (client ExperimentsClient) GetByIDResponder(resp *http.Response) (result Experiment, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetByQuery get all experiments in a specific workspace with the specified query filters.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroupName - the Name of the resource group in which the workspace is located.
// workspaceName - the name of the workspace.
// queryParams - query parameters for data sorting and filtering.
func (client ExperimentsClient) GetByQuery(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, queryParams *QueryParams) (result PaginatedExperimentListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ExperimentsClient.GetByQuery")
		defer func() {
			sc := -1
			if result.pel.Response.Response != nil {
				sc = result.pel.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.getByQueryNextResults
	req, err := client.GetByQueryPreparer(ctx, subscriptionID, resourceGroupName, workspaceName, queryParams)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "GetByQuery", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetByQuerySender(req)
	if err != nil {
		result.pel.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "GetByQuery", resp, "Failure sending request")
		return
	}

	result.pel, err = client.GetByQueryResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "GetByQuery", resp, "Failure responding to request")
		return
	}
	if result.pel.hasNextLink() && result.pel.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// GetByQueryPreparer prepares the GetByQuery request.
func (client ExperimentsClient) GetByQueryPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, queryParams *QueryParams) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments:query", pathParameters))
	if queryParams != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(queryParams))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetByQuerySender sends the GetByQuery request. The method will close the
// http.Response Body if it receives an error.
func (client ExperimentsClient) GetByQuerySender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetByQueryResponder handles the response to the GetByQuery request. The method always
// closes the http.Response Body.
func (client ExperimentsClient) GetByQueryResponder(resp *http.Response) (result PaginatedExperimentList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// getByQueryNextResults retrieves the next set of results, if any.
func (client ExperimentsClient) getByQueryNextResults(ctx context.Context, lastResults PaginatedExperimentList) (result PaginatedExperimentList, err error) {
	req, err := lastResults.paginatedExperimentListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "getByQueryNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.GetByQuerySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "getByQueryNextResults", resp, "Failure sending next results request")
	}
	result, err = client.GetByQueryResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "getByQueryNextResults", resp, "Failure responding to next results request")
	}
	return
}

// GetByQueryComplete enumerates all values, automatically crossing page boundaries as required.
func (client ExperimentsClient) GetByQueryComplete(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, queryParams *QueryParams) (result PaginatedExperimentListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ExperimentsClient.GetByQuery")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.GetByQuery(ctx, subscriptionID, resourceGroupName, workspaceName, queryParams)
	return
}

// Update update details of an Experiment with specific Experiment Id.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroupName - the Name of the resource group in which the workspace is located.
// workspaceName - the name of the workspace.
// experimentID - the identifier of the experiment.
// modifyExperimentDto - experiment details which needs to be updated.
func (client ExperimentsClient) Update(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentID string, modifyExperimentDto *ModifyExperiment) (result Experiment, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ExperimentsClient.Update")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.UpdatePreparer(ctx, subscriptionID, resourceGroupName, workspaceName, experimentID, modifyExperimentDto)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "Update", nil, "Failure preparing request")
		return
	}

	resp, err := client.UpdateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "Update", resp, "Failure sending request")
		return
	}

	result, err = client.UpdateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.ExperimentsClient", "Update", resp, "Failure responding to request")
		return
	}

	return
}

// UpdatePreparer prepares the Update request.
func (client ExperimentsClient) UpdatePreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentID string, modifyExperimentDto *ModifyExperiment) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"experimentId":      autorest.Encode("path", experimentID),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experimentids/{experimentId}", pathParameters))
	if modifyExperimentDto != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(modifyExperimentDto))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateSender sends the Update request. The method will close the
// http.Response Body if it receives an error.
func (client ExperimentsClient) UpdateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// UpdateResponder handles the response to the Update request. The method always
// closes the http.Response Body.
func (client ExperimentsClient) UpdateResponder(resp *http.Response) (result Experiment, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
