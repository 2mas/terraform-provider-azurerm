package machinelearningservices

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"github.com/gofrs/uuid"
	"net/http"
)

// ProfilesClient is the these APIs allow end users to manage Azure Machine Learning Services.
type ProfilesClient struct {
	BaseClient
}

// NewProfilesClient creates an instance of the ProfilesClient client.
func NewProfilesClient() ProfilesClient {
	return NewProfilesClientWithBaseURI(DefaultBaseURI)
}

// NewProfilesClientWithBaseURI creates an instance of the ProfilesClient client using a custom endpoint.  Use this
// when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewProfilesClientWithBaseURI(baseURI string) ProfilesClient {
	return ProfilesClient{NewWithBaseURI(baseURI)}
}

// Create create a Profile for an Image.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroup - the Name of the resource group in which the workspace is located.
// workspace - the name of the workspace.
// imageID - the Image Id.
// inputRequest - the payload that is used to create the Profile.
func (client ProfilesClient) Create(ctx context.Context, subscriptionID uuid.UUID, resourceGroup string, workspace string, imageID string, inputRequest ProfileRequestBase) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ProfilesClient.Create")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: inputRequest,
			Constraints: []validation.Constraint{{Target: "inputRequest.Name", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("machinelearningservices.ProfilesClient", "Create", err.Error())
	}

	req, err := client.CreatePreparer(ctx, subscriptionID, resourceGroup, workspace, imageID, inputRequest)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.ProfilesClient", "Create", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "machinelearningservices.ProfilesClient", "Create", resp, "Failure sending request")
		return
	}

	result, err = client.CreateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.ProfilesClient", "Create", resp, "Failure responding to request")
		return
	}

	return
}

// CreatePreparer prepares the Create request.
func (client ProfilesClient) CreatePreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroup string, workspace string, imageID string, inputRequest ProfileRequestBase) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"imageId":        autorest.Encode("path", imageID),
		"resourceGroup":  autorest.Encode("path", resourceGroup),
		"subscriptionId": autorest.Encode("path", subscriptionID),
		"workspace":      autorest.Encode("path", workspace),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/images/{imageId}/profiles", pathParameters),
		autorest.WithJSON(inputRequest))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client ProfilesClient) CreateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client ProfilesClient) CreateResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ListQuery if no filter is passed, the query lists all Profiles for the Image. The returned list is paginated and the
// count of items in each page is an optional parameter.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroup - the Name of the resource group in which the workspace is located.
// workspace - the name of the workspace.
// imageID - the Image Id.
// name - the Profile name.
// description - the Profile description.
// tags - a set of tags with which to filter the returned models.
// It is a comma separated string of tags key or tags key=value
// Example: tagKey1,tagKey2,tagKey3=value3
// properties - a set of properties with which to filter the returned models.
// It is a comma separated string of properties key and/or properties key=value
// Example: propKey1,propKey2,propKey3=value3
// count - the number of items to retrieve in a page.
// skipToken - the continuation token to retrieve the next page.
// orderBy - the option to order the response.
func (client ProfilesClient) ListQuery(ctx context.Context, subscriptionID uuid.UUID, resourceGroup string, workspace string, imageID string, name string, description string, tags string, properties string, count *int32, skipToken string, orderBy string) (result PaginatedProfileResponseListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ProfilesClient.ListQuery")
		defer func() {
			sc := -1
			if result.pprl.Response.Response != nil {
				sc = result.pprl.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listQueryNextResults
	req, err := client.ListQueryPreparer(ctx, subscriptionID, resourceGroup, workspace, imageID, name, description, tags, properties, count, skipToken, orderBy)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.ProfilesClient", "ListQuery", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListQuerySender(req)
	if err != nil {
		result.pprl.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.ProfilesClient", "ListQuery", resp, "Failure sending request")
		return
	}

	result.pprl, err = client.ListQueryResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.ProfilesClient", "ListQuery", resp, "Failure responding to request")
		return
	}
	if result.pprl.hasNextLink() && result.pprl.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListQueryPreparer prepares the ListQuery request.
func (client ProfilesClient) ListQueryPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroup string, workspace string, imageID string, name string, description string, tags string, properties string, count *int32, skipToken string, orderBy string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"imageId":        autorest.Encode("path", imageID),
		"resourceGroup":  autorest.Encode("path", resourceGroup),
		"subscriptionId": autorest.Encode("path", subscriptionID),
		"workspace":      autorest.Encode("path", workspace),
	}

	queryParameters := map[string]interface{}{}
	if len(name) > 0 {
		queryParameters["name"] = autorest.Encode("query", name)
	}
	if len(description) > 0 {
		queryParameters["description"] = autorest.Encode("query", description)
	}
	if len(tags) > 0 {
		queryParameters["tags"] = autorest.Encode("query", tags)
	}
	if len(properties) > 0 {
		queryParameters["properties"] = autorest.Encode("query", properties)
	}
	if count != nil {
		queryParameters["count"] = autorest.Encode("query", *count)
	}
	if len(skipToken) > 0 {
		queryParameters["$skipToken"] = autorest.Encode("query", skipToken)
	}
	if len(string(orderBy)) > 0 {
		queryParameters["orderBy"] = autorest.Encode("query", orderBy)
	} else {
		queryParameters["orderBy"] = autorest.Encode("query", "CreatedAtDesc")
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/images/{imageId}/profiles", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListQuerySender sends the ListQuery request. The method will close the
// http.Response Body if it receives an error.
func (client ProfilesClient) ListQuerySender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListQueryResponder handles the response to the ListQuery request. The method always
// closes the http.Response Body.
func (client ProfilesClient) ListQueryResponder(resp *http.Response) (result PaginatedProfileResponseList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listQueryNextResults retrieves the next set of results, if any.
func (client ProfilesClient) listQueryNextResults(ctx context.Context, lastResults PaginatedProfileResponseList) (result PaginatedProfileResponseList, err error) {
	req, err := lastResults.paginatedProfileResponseListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "machinelearningservices.ProfilesClient", "listQueryNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListQuerySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "machinelearningservices.ProfilesClient", "listQueryNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListQueryResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.ProfilesClient", "listQueryNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListQueryComplete enumerates all values, automatically crossing page boundaries as required.
func (client ProfilesClient) ListQueryComplete(ctx context.Context, subscriptionID uuid.UUID, resourceGroup string, workspace string, imageID string, name string, description string, tags string, properties string, count *int32, skipToken string, orderBy string) (result PaginatedProfileResponseListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ProfilesClient.ListQuery")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListQuery(ctx, subscriptionID, resourceGroup, workspace, imageID, name, description, tags, properties, count, skipToken, orderBy)
	return
}

// QueryByID get the Profile for an Image.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroup - the Name of the resource group in which the workspace is located.
// workspace - the name of the workspace.
// imageID - the Image Id.
// ID - the Profile Id.
func (client ProfilesClient) QueryByID(ctx context.Context, subscriptionID uuid.UUID, resourceGroup string, workspace string, imageID string, ID string) (result ProfileResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ProfilesClient.QueryByID")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.QueryByIDPreparer(ctx, subscriptionID, resourceGroup, workspace, imageID, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.ProfilesClient", "QueryByID", nil, "Failure preparing request")
		return
	}

	resp, err := client.QueryByIDSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.ProfilesClient", "QueryByID", resp, "Failure sending request")
		return
	}

	result, err = client.QueryByIDResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.ProfilesClient", "QueryByID", resp, "Failure responding to request")
		return
	}

	return
}

// QueryByIDPreparer prepares the QueryByID request.
func (client ProfilesClient) QueryByIDPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroup string, workspace string, imageID string, ID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id":             autorest.Encode("path", ID),
		"imageId":        autorest.Encode("path", imageID),
		"resourceGroup":  autorest.Encode("path", resourceGroup),
		"subscriptionId": autorest.Encode("path", subscriptionID),
		"workspace":      autorest.Encode("path", workspace),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/images/{imageId}/profiles/{id}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// QueryByIDSender sends the QueryByID request. The method will close the
// http.Response Body if it receives an error.
func (client ProfilesClient) QueryByIDSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// QueryByIDResponder handles the response to the QueryByID request. The method always
// closes the http.Response Body.
func (client ProfilesClient) QueryByIDResponder(resp *http.Response) (result ProfileResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
