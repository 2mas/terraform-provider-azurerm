package machinelearningservices

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

// ArchitectureType enumerates the values for architecture type.
type ArchitectureType string

const (
	// Amd64 ...
	Amd64 ArchitectureType = "Amd64"
	// Arm32v7 ...
	Arm32v7 ArchitectureType = "Arm32v7"
)

// PossibleArchitectureTypeValues returns an array of possible values for the ArchitectureType const type.
func PossibleArchitectureTypeValues() []ArchitectureType {
	return []ArchitectureType{Amd64, Arm32v7}
}

// AsyncOperationState enumerates the values for async operation state.
type AsyncOperationState string

const (
	// Cancelled ...
	Cancelled AsyncOperationState = "Cancelled"
	// Failed ...
	Failed AsyncOperationState = "Failed"
	// NotStarted ...
	NotStarted AsyncOperationState = "NotStarted"
	// Running ...
	Running AsyncOperationState = "Running"
	// Succeeded ...
	Succeeded AsyncOperationState = "Succeeded"
	// TimedOut ...
	TimedOut AsyncOperationState = "TimedOut"
)

// PossibleAsyncOperationStateValues returns an array of possible values for the AsyncOperationState const type.
func PossibleAsyncOperationStateValues() []AsyncOperationState {
	return []AsyncOperationState{Cancelled, Failed, NotStarted, Running, Succeeded, TimedOut}
}

// AzureStorageCredentialTypes enumerates the values for azure storage credential types.
type AzureStorageCredentialTypes string

const (
	// AzureStorageCredentialTypesAccountKey ...
	AzureStorageCredentialTypesAccountKey AzureStorageCredentialTypes = "AccountKey"
	// AzureStorageCredentialTypesClientCredentials ...
	AzureStorageCredentialTypesClientCredentials AzureStorageCredentialTypes = "ClientCredentials"
	// AzureStorageCredentialTypesNone ...
	AzureStorageCredentialTypesNone AzureStorageCredentialTypes = "None"
	// AzureStorageCredentialTypesSas ...
	AzureStorageCredentialTypesSas AzureStorageCredentialTypes = "Sas"
)

// PossibleAzureStorageCredentialTypesValues returns an array of possible values for the AzureStorageCredentialTypes const type.
func PossibleAzureStorageCredentialTypesValues() []AzureStorageCredentialTypes {
	return []AzureStorageCredentialTypes{AzureStorageCredentialTypesAccountKey, AzureStorageCredentialTypesClientCredentials, AzureStorageCredentialTypesNone, AzureStorageCredentialTypesSas}
}

// Communicator enumerates the values for communicator.
type Communicator string

const (
	// Gloo ...
	Gloo Communicator = "Gloo"
	// Mpi ...
	Mpi Communicator = "Mpi"
	// Nccl ...
	Nccl Communicator = "Nccl"
	// None ...
	None Communicator = "None"
	// ParameterServer ...
	ParameterServer Communicator = "ParameterServer"
)

// PossibleCommunicatorValues returns an array of possible values for the Communicator const type.
func PossibleCommunicatorValues() []Communicator {
	return []Communicator{Gloo, Mpi, Nccl, None, ParameterServer}
}

// ComputeType enumerates the values for compute type.
type ComputeType string

const (
	// ComputeTypeACI ...
	ComputeTypeACI ComputeType = "ACI"
	// ComputeTypeAKS ...
	ComputeTypeAKS ComputeType = "AKS"
	// ComputeTypeAKSENDPOINT ...
	ComputeTypeAKSENDPOINT ComputeType = "AKSENDPOINT"
	// ComputeTypeAKSVariantResponse ...
	ComputeTypeAKSVariantResponse ComputeType = "AKSVariantResponse"
	// ComputeTypeAMLCOMPUTE ...
	ComputeTypeAMLCOMPUTE ComputeType = "AMLCOMPUTE"
	// ComputeTypeIOT ...
	ComputeTypeIOT ComputeType = "IOT"
	// ComputeTypeServiceResponseBase ...
	ComputeTypeServiceResponseBase ComputeType = "ServiceResponseBase"
	// ComputeTypeUNKNOWON ...
	ComputeTypeUNKNOWON ComputeType = "UNKNOWON"
)

// PossibleComputeTypeValues returns an array of possible values for the ComputeType const type.
func PossibleComputeTypeValues() []ComputeType {
	return []ComputeType{ComputeTypeACI, ComputeTypeAKS, ComputeTypeAKSENDPOINT, ComputeTypeAKSVariantResponse, ComputeTypeAMLCOMPUTE, ComputeTypeIOT, ComputeTypeServiceResponseBase, ComputeTypeUNKNOWON}
}

// ComputeTypeBasicCreateServiceRequest enumerates the values for compute type basic create service request.
type ComputeTypeBasicCreateServiceRequest string

const (
	// ComputeTypeBasicCreateServiceRequestComputeTypeACI ...
	ComputeTypeBasicCreateServiceRequestComputeTypeACI ComputeTypeBasicCreateServiceRequest = "ACI"
	// ComputeTypeBasicCreateServiceRequestComputeTypeAKS ...
	ComputeTypeBasicCreateServiceRequestComputeTypeAKS ComputeTypeBasicCreateServiceRequest = "AKS"
	// ComputeTypeBasicCreateServiceRequestComputeTypeAKSENDPOINT ...
	ComputeTypeBasicCreateServiceRequestComputeTypeAKSENDPOINT ComputeTypeBasicCreateServiceRequest = "AKSENDPOINT"
	// ComputeTypeBasicCreateServiceRequestComputeTypeCreateEndpointVariantRequest ...
	ComputeTypeBasicCreateServiceRequestComputeTypeCreateEndpointVariantRequest ComputeTypeBasicCreateServiceRequest = "CreateEndpointVariantRequest"
	// ComputeTypeBasicCreateServiceRequestComputeTypeCreateServiceRequest ...
	ComputeTypeBasicCreateServiceRequestComputeTypeCreateServiceRequest ComputeTypeBasicCreateServiceRequest = "CreateServiceRequest"
	// ComputeTypeBasicCreateServiceRequestComputeTypeIOT ...
	ComputeTypeBasicCreateServiceRequestComputeTypeIOT ComputeTypeBasicCreateServiceRequest = "IOT"
)

// PossibleComputeTypeBasicCreateServiceRequestValues returns an array of possible values for the ComputeTypeBasicCreateServiceRequest const type.
func PossibleComputeTypeBasicCreateServiceRequestValues() []ComputeTypeBasicCreateServiceRequest {
	return []ComputeTypeBasicCreateServiceRequest{ComputeTypeBasicCreateServiceRequestComputeTypeACI, ComputeTypeBasicCreateServiceRequestComputeTypeAKS, ComputeTypeBasicCreateServiceRequestComputeTypeAKSENDPOINT, ComputeTypeBasicCreateServiceRequestComputeTypeCreateEndpointVariantRequest, ComputeTypeBasicCreateServiceRequestComputeTypeCreateServiceRequest, ComputeTypeBasicCreateServiceRequestComputeTypeIOT}
}

// CreatedFromLocationType enumerates the values for created from location type.
type CreatedFromLocationType string

const (
	// ArtifactID ...
	ArtifactID CreatedFromLocationType = "ArtifactId"
)

// PossibleCreatedFromLocationTypeValues returns an array of possible values for the CreatedFromLocationType const type.
func PossibleCreatedFromLocationTypeValues() []CreatedFromLocationType {
	return []CreatedFromLocationType{ArtifactID}
}

// CreatedFromType enumerates the values for created from type.
type CreatedFromType string

const (
	// Notebook ...
	Notebook CreatedFromType = "Notebook"
)

// PossibleCreatedFromTypeValues returns an array of possible values for the CreatedFromType const type.
func PossibleCreatedFromTypeValues() []CreatedFromType {
	return []CreatedFromType{Notebook}
}

// DataStoreMode enumerates the values for data store mode.
type DataStoreMode string

const (
	// Download ...
	Download DataStoreMode = "Download"
	// Mount ...
	Mount DataStoreMode = "Mount"
	// Upload ...
	Upload DataStoreMode = "Upload"
)

// PossibleDataStoreModeValues returns an array of possible values for the DataStoreMode const type.
func PossibleDataStoreModeValues() []DataStoreMode {
	return []DataStoreMode{Download, Mount, Upload}
}

// DataStoreType enumerates the values for data store type.
type DataStoreType string

const (
	// DataStoreTypeAzureBlob ...
	DataStoreTypeAzureBlob DataStoreType = "AzureBlob"
	// DataStoreTypeAzureDataLake ...
	DataStoreTypeAzureDataLake DataStoreType = "AzureDataLake"
	// DataStoreTypeAzureDataLakeGen2 ...
	DataStoreTypeAzureDataLakeGen2 DataStoreType = "AzureDataLakeGen2"
	// DataStoreTypeAzureFile ...
	DataStoreTypeAzureFile DataStoreType = "AzureFile"
	// DataStoreTypeAzurePostgreSQL ...
	DataStoreTypeAzurePostgreSQL DataStoreType = "AzurePostgreSql"
	// DataStoreTypeAzureSQLDatabase ...
	DataStoreTypeAzureSQLDatabase DataStoreType = "AzureSqlDatabase"
	// DataStoreTypeDBFS ...
	DataStoreTypeDBFS DataStoreType = "DBFS"
	// DataStoreTypeGlusterFs ...
	DataStoreTypeGlusterFs DataStoreType = "GlusterFs"
)

// PossibleDataStoreTypeValues returns an array of possible values for the DataStoreType const type.
func PossibleDataStoreTypeValues() []DataStoreType {
	return []DataStoreType{DataStoreTypeAzureBlob, DataStoreTypeAzureDataLake, DataStoreTypeAzureDataLakeGen2, DataStoreTypeAzureFile, DataStoreTypeAzurePostgreSQL, DataStoreTypeAzureSQLDatabase, DataStoreTypeDBFS, DataStoreTypeGlusterFs}
}

// DeploymentType enumerates the values for deployment type.
type DeploymentType string

const (
	// Batch ...
	Batch DeploymentType = "Batch"
	// GRPCRealtimeEndpoint ...
	GRPCRealtimeEndpoint DeploymentType = "GRPCRealtimeEndpoint"
	// HTTPRealtimeEndpoint ...
	HTTPRealtimeEndpoint DeploymentType = "HttpRealtimeEndpoint"
)

// PossibleDeploymentTypeValues returns an array of possible values for the DeploymentType const type.
func PossibleDeploymentTypeValues() []DeploymentType {
	return []DeploymentType{Batch, GRPCRealtimeEndpoint, HTTPRealtimeEndpoint}
}

// Framework enumerates the values for framework.
type Framework string

const (
	// Cntk ...
	Cntk Framework = "Cntk"
	// PySpark ...
	PySpark Framework = "PySpark"
	// Python ...
	Python Framework = "Python"
	// PyTorch ...
	PyTorch Framework = "PyTorch"
	// TensorFlow ...
	TensorFlow Framework = "TensorFlow"
)

// PossibleFrameworkValues returns an array of possible values for the Framework const type.
func PossibleFrameworkValues() []Framework {
	return []Framework{Cntk, PySpark, Python, PyTorch, TensorFlow}
}

// Goal enumerates the values for goal.
type Goal string

const (
	// MAXIMIZE ...
	MAXIMIZE Goal = "MAXIMIZE"
	// MINIMIZE ...
	MINIMIZE Goal = "MINIMIZE"
)

// PossibleGoalValues returns an array of possible values for the Goal const type.
func PossibleGoalValues() []Goal {
	return []Goal{MAXIMIZE, MINIMIZE}
}

// ImageFlavor enumerates the values for image flavor.
type ImageFlavor string

const (
	// ImageFlavorACCELCONTAINER ...
	ImageFlavorACCELCONTAINER ImageFlavor = "ACCELCONTAINER"
	// ImageFlavorImageResponseBase ...
	ImageFlavorImageResponseBase ImageFlavor = "ImageResponseBase"
	// ImageFlavorWEBAPICONTAINER ...
	ImageFlavorWEBAPICONTAINER ImageFlavor = "WEBAPICONTAINER"
)

// PossibleImageFlavorValues returns an array of possible values for the ImageFlavor const type.
func PossibleImageFlavorValues() []ImageFlavor {
	return []ImageFlavor{ImageFlavorACCELCONTAINER, ImageFlavorImageResponseBase, ImageFlavorWEBAPICONTAINER}
}

// ImageType enumerates the values for image type.
type ImageType string

const (
	// Docker ...
	Docker ImageType = "Docker"
)

// PossibleImageTypeValues returns an array of possible values for the ImageType const type.
func PossibleImageTypeValues() []ImageType {
	return []ImageType{Docker}
}

// Name enumerates the values for name.
type Name string

const (
	// BAYESIANOPTIMIZATION ...
	BAYESIANOPTIMIZATION Name = "BAYESIANOPTIMIZATION"
	// GRID ...
	GRID Name = "GRID"
	// RANDOM ...
	RANDOM Name = "RANDOM"
)

// PossibleNameValues returns an array of possible values for the Name const type.
func PossibleNameValues() []Name {
	return []Name{BAYESIANOPTIMIZATION, GRID, RANDOM}
}

// NameBasicHyperDrivePolicyConfigBase enumerates the values for name basic hyper drive policy config base.
type NameBasicHyperDrivePolicyConfigBase string

const (
	// NameBandit ...
	NameBandit NameBasicHyperDrivePolicyConfigBase = "Bandit"
	// NameDefault ...
	NameDefault NameBasicHyperDrivePolicyConfigBase = "Default"
	// NameHyperDrivePolicyConfigBase ...
	NameHyperDrivePolicyConfigBase NameBasicHyperDrivePolicyConfigBase = "HyperDrivePolicyConfigBase"
	// NameMedianStopping ...
	NameMedianStopping NameBasicHyperDrivePolicyConfigBase = "MedianStopping"
	// NameTruncationSelection ...
	NameTruncationSelection NameBasicHyperDrivePolicyConfigBase = "TruncationSelection"
)

// PossibleNameBasicHyperDrivePolicyConfigBaseValues returns an array of possible values for the NameBasicHyperDrivePolicyConfigBase const type.
func PossibleNameBasicHyperDrivePolicyConfigBaseValues() []NameBasicHyperDrivePolicyConfigBase {
	return []NameBasicHyperDrivePolicyConfigBase{NameBandit, NameDefault, NameHyperDrivePolicyConfigBase, NameMedianStopping, NameTruncationSelection}
}

// OSType enumerates the values for os type.
type OSType string

const (
	// Linux ...
	Linux OSType = "Linux"
	// Windows ...
	Windows OSType = "Windows"
)

// PossibleOSTypeValues returns an array of possible values for the OSType const type.
func PossibleOSTypeValues() []OSType {
	return []OSType{Linux, Windows}
}

// RuntimeType enumerates the values for runtime type.
type RuntimeType string

const (
	// RuntimeTypePython ...
	RuntimeTypePython RuntimeType = "Python"
	// RuntimeTypePythonCustom ...
	RuntimeTypePythonCustom RuntimeType = "PythonCustom"
	// RuntimeTypePythonSlim ...
	RuntimeTypePythonSlim RuntimeType = "PythonSlim"
	// RuntimeTypeSparkPython ...
	RuntimeTypeSparkPython RuntimeType = "SparkPython"
	// RuntimeTypeTlc310 ...
	RuntimeTypeTlc310 RuntimeType = "Tlc310"
	// RuntimeTypeTlc37 ...
	RuntimeTypeTlc37 RuntimeType = "Tlc37"
	// RuntimeTypeTlc38 ...
	RuntimeTypeTlc38 RuntimeType = "Tlc38"
)

// PossibleRuntimeTypeValues returns an array of possible values for the RuntimeType const type.
func PossibleRuntimeTypeValues() []RuntimeType {
	return []RuntimeType{RuntimeTypePython, RuntimeTypePythonCustom, RuntimeTypePythonSlim, RuntimeTypeSparkPython, RuntimeTypeTlc310, RuntimeTypeTlc37, RuntimeTypeTlc38}
}

// StoredProcedureParameterType enumerates the values for stored procedure parameter type.
type StoredProcedureParameterType string

const (
	// StoredProcedureParameterTypeBoolean ...
	StoredProcedureParameterTypeBoolean StoredProcedureParameterType = "Boolean"
	// StoredProcedureParameterTypeDate ...
	StoredProcedureParameterTypeDate StoredProcedureParameterType = "Date"
	// StoredProcedureParameterTypeDecimal ...
	StoredProcedureParameterTypeDecimal StoredProcedureParameterType = "Decimal"
	// StoredProcedureParameterTypeGUID ...
	StoredProcedureParameterTypeGUID StoredProcedureParameterType = "Guid"
	// StoredProcedureParameterTypeInt ...
	StoredProcedureParameterTypeInt StoredProcedureParameterType = "Int"
	// StoredProcedureParameterTypeString ...
	StoredProcedureParameterTypeString StoredProcedureParameterType = "String"
)

// PossibleStoredProcedureParameterTypeValues returns an array of possible values for the StoredProcedureParameterType const type.
func PossibleStoredProcedureParameterTypeValues() []StoredProcedureParameterType {
	return []StoredProcedureParameterType{StoredProcedureParameterTypeBoolean, StoredProcedureParameterTypeDate, StoredProcedureParameterTypeDecimal, StoredProcedureParameterTypeGUID, StoredProcedureParameterTypeInt, StoredProcedureParameterTypeString}
}

// VariantType enumerates the values for variant type.
type VariantType string

const (
	// Control ...
	Control VariantType = "Control"
	// Treatment ...
	Treatment VariantType = "Treatment"
)

// PossibleVariantTypeValues returns an array of possible values for the VariantType const type.
func PossibleVariantTypeValues() []VariantType {
	return []VariantType{Control, Treatment}
}

// WebServiceState enumerates the values for web service state.
type WebServiceState string

const (
	// WebServiceStateFailed ...
	WebServiceStateFailed WebServiceState = "Failed"
	// WebServiceStateHealthy ...
	WebServiceStateHealthy WebServiceState = "Healthy"
	// WebServiceStateTransitioning ...
	WebServiceStateTransitioning WebServiceState = "Transitioning"
	// WebServiceStateUnhealthy ...
	WebServiceStateUnhealthy WebServiceState = "Unhealthy"
)

// PossibleWebServiceStateValues returns an array of possible values for the WebServiceState const type.
func PossibleWebServiceStateValues() []WebServiceState {
	return []WebServiceState{WebServiceStateFailed, WebServiceStateHealthy, WebServiceStateTransitioning, WebServiceStateUnhealthy}
}

// YarnDeployMode enumerates the values for yarn deploy mode.
type YarnDeployMode string

const (
	// YarnDeployModeClient ...
	YarnDeployModeClient YarnDeployMode = "Client"
	// YarnDeployModeCluster ...
	YarnDeployModeCluster YarnDeployMode = "Cluster"
	// YarnDeployModeNone ...
	YarnDeployModeNone YarnDeployMode = "None"
)

// PossibleYarnDeployModeValues returns an array of possible values for the YarnDeployMode const type.
func PossibleYarnDeployModeValues() []YarnDeployMode {
	return []YarnDeployMode{YarnDeployModeClient, YarnDeployModeCluster, YarnDeployModeNone}
}
