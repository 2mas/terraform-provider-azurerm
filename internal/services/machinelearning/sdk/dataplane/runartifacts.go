package machinelearningservices

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"github.com/gofrs/uuid"
	"net/http"
)

// RunArtifactsClient is the these APIs allow end users to manage Azure Machine Learning Services.
type RunArtifactsClient struct {
	BaseClient
}

// NewRunArtifactsClient creates an instance of the RunArtifactsClient client.
func NewRunArtifactsClient() RunArtifactsClient {
	return NewRunArtifactsClientWithBaseURI(DefaultBaseURI)
}

// NewRunArtifactsClientWithBaseURI creates an instance of the RunArtifactsClient client using a custom endpoint.  Use
// this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewRunArtifactsClientWithBaseURI(baseURI string) RunArtifactsClient {
	return RunArtifactsClient{NewWithBaseURI(baseURI)}
}

// BatchCreateEmptyArtifacts create a batch of empty Artifacts in a specific Run.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroupName - the Name of the resource group in which the workspace is located.
// workspaceName - the name of the workspace.
// experimentName - the experiment name.
// runID - the identifier of the Run.
// artifactPaths - the list of artifact paths.
func (client RunArtifactsClient) BatchCreateEmptyArtifacts(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, artifactPaths *ArtifactPathList) (result BatchArtifactContentInformationResult, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/RunArtifactsClient.BatchCreateEmptyArtifacts")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: artifactPaths,
			Constraints: []validation.Constraint{{Target: "artifactPaths", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "artifactPaths.Paths", Name: validation.Null, Rule: true, Chain: nil}}}}}}); err != nil {
		return result, validation.NewError("machinelearningservices.RunArtifactsClient", "BatchCreateEmptyArtifacts", err.Error())
	}

	req, err := client.BatchCreateEmptyArtifactsPreparer(ctx, subscriptionID, resourceGroupName, workspaceName, experimentName, runID, artifactPaths)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "BatchCreateEmptyArtifacts", nil, "Failure preparing request")
		return
	}

	resp, err := client.BatchCreateEmptyArtifactsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "BatchCreateEmptyArtifacts", resp, "Failure sending request")
		return
	}

	result, err = client.BatchCreateEmptyArtifactsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "BatchCreateEmptyArtifacts", resp, "Failure responding to request")
		return
	}

	return
}

// BatchCreateEmptyArtifactsPreparer prepares the BatchCreateEmptyArtifacts request.
func (client RunArtifactsClient) BatchCreateEmptyArtifactsPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, artifactPaths *ArtifactPathList) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"experimentName":    autorest.Encode("path", experimentName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"runId":             autorest.Encode("path", runID),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/artifacts/batch/metadata", pathParameters))
	if artifactPaths != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(artifactPaths))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// BatchCreateEmptyArtifactsSender sends the BatchCreateEmptyArtifacts request. The method will close the
// http.Response Body if it receives an error.
func (client RunArtifactsClient) BatchCreateEmptyArtifactsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// BatchCreateEmptyArtifactsResponder handles the response to the BatchCreateEmptyArtifacts request. The method always
// closes the http.Response Body.
func (client RunArtifactsClient) BatchCreateEmptyArtifactsResponder(resp *http.Response) (result BatchArtifactContentInformationResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetByID get Artifact for a specific Id.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroupName - the Name of the resource group in which the workspace is located.
// workspaceName - the name of the workspace.
// experimentName - the experiment name.
// runID - the identifier of the Run.
// pathParameter - the Artifact Path.
func (client RunArtifactsClient) GetByID(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, pathParameter string) (result Artifact, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/RunArtifactsClient.GetByID")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetByIDPreparer(ctx, subscriptionID, resourceGroupName, workspaceName, experimentName, runID, pathParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "GetByID", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetByIDSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "GetByID", resp, "Failure sending request")
		return
	}

	result, err = client.GetByIDResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "GetByID", resp, "Failure responding to request")
		return
	}

	return
}

// GetByIDPreparer prepares the GetByID request.
func (client RunArtifactsClient) GetByIDPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, pathParameter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"experimentName":    autorest.Encode("path", experimentName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"runId":             autorest.Encode("path", runID),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	queryParameters := map[string]interface{}{}
	if len(pathParameter) > 0 {
		queryParameters["path"] = autorest.Encode("query", pathParameter)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/artifacts/metadata", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetByIDSender sends the GetByID request. The method will close the
// http.Response Body if it receives an error.
func (client RunArtifactsClient) GetByIDSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetByIDResponder handles the response to the GetByID request. The method always
// closes the http.Response Body.
func (client RunArtifactsClient) GetByIDResponder(resp *http.Response) (result Artifact, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetContentInformation get Artifact content information for give Run Id.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroupName - the Name of the resource group in which the workspace is located.
// workspaceName - the name of the workspace.
// experimentName - the experiment name.
// runID - the identifier of the Run.
// pathParameter - the Artifact Path.
func (client RunArtifactsClient) GetContentInformation(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, pathParameter string) (result ArtifactContentInformation, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/RunArtifactsClient.GetContentInformation")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetContentInformationPreparer(ctx, subscriptionID, resourceGroupName, workspaceName, experimentName, runID, pathParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "GetContentInformation", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetContentInformationSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "GetContentInformation", resp, "Failure sending request")
		return
	}

	result, err = client.GetContentInformationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "GetContentInformation", resp, "Failure responding to request")
		return
	}

	return
}

// GetContentInformationPreparer prepares the GetContentInformation request.
func (client RunArtifactsClient) GetContentInformationPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, pathParameter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"experimentName":    autorest.Encode("path", experimentName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"runId":             autorest.Encode("path", runID),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	queryParameters := map[string]interface{}{}
	if len(pathParameter) > 0 {
		queryParameters["path"] = autorest.Encode("query", pathParameter)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/artifacts/contentinfo", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetContentInformationSender sends the GetContentInformation request. The method will close the
// http.Response Body if it receives an error.
func (client RunArtifactsClient) GetContentInformationSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetContentInformationResponder handles the response to the GetContentInformation request. The method always
// closes the http.Response Body.
func (client RunArtifactsClient) GetContentInformationResponder(resp *http.Response) (result ArtifactContentInformation, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetSasURI get URI of an Artifact for a specific Run Id.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroupName - the Name of the resource group in which the workspace is located.
// workspaceName - the name of the workspace.
// experimentName - the experiment name.
// runID - the identifier of the Run.
// pathParameter - the Artifact Path.
func (client RunArtifactsClient) GetSasURI(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, pathParameter string) (result String, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/RunArtifactsClient.GetSasURI")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetSasURIPreparer(ctx, subscriptionID, resourceGroupName, workspaceName, experimentName, runID, pathParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "GetSasURI", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSasURISender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "GetSasURI", resp, "Failure sending request")
		return
	}

	result, err = client.GetSasURIResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "GetSasURI", resp, "Failure responding to request")
		return
	}

	return
}

// GetSasURIPreparer prepares the GetSasURI request.
func (client RunArtifactsClient) GetSasURIPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, pathParameter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"experimentName":    autorest.Encode("path", experimentName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"runId":             autorest.Encode("path", runID),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	queryParameters := map[string]interface{}{}
	if len(pathParameter) > 0 {
		queryParameters["path"] = autorest.Encode("query", pathParameter)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/artifacts/artifacturi", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSasURISender sends the GetSasURI request. The method will close the
// http.Response Body if it receives an error.
func (client RunArtifactsClient) GetSasURISender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetSasURIResponder handles the response to the GetSasURI request. The method always
// closes the http.Response Body.
func (client RunArtifactsClient) GetSasURIResponder(resp *http.Response) (result String, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListInContainer get Artifacts in container for a specific Run Id.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroupName - the Name of the resource group in which the workspace is located.
// workspaceName - the name of the workspace.
// experimentName - the experiment name.
// runID - the identifier of the Run.
// continuationToken - the Continuation Token.
func (client RunArtifactsClient) ListInContainer(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, continuationToken string) (result PaginatedArtifactListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/RunArtifactsClient.ListInContainer")
		defer func() {
			sc := -1
			if result.pal.Response.Response != nil {
				sc = result.pal.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listInContainerNextResults
	req, err := client.ListInContainerPreparer(ctx, subscriptionID, resourceGroupName, workspaceName, experimentName, runID, continuationToken)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "ListInContainer", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListInContainerSender(req)
	if err != nil {
		result.pal.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "ListInContainer", resp, "Failure sending request")
		return
	}

	result.pal, err = client.ListInContainerResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "ListInContainer", resp, "Failure responding to request")
		return
	}
	if result.pal.hasNextLink() && result.pal.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListInContainerPreparer prepares the ListInContainer request.
func (client RunArtifactsClient) ListInContainerPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, continuationToken string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"experimentName":    autorest.Encode("path", experimentName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"runId":             autorest.Encode("path", runID),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	queryParameters := map[string]interface{}{}
	if len(continuationToken) > 0 {
		queryParameters["continuationToken"] = autorest.Encode("query", continuationToken)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/artifacts", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListInContainerSender sends the ListInContainer request. The method will close the
// http.Response Body if it receives an error.
func (client RunArtifactsClient) ListInContainerSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListInContainerResponder handles the response to the ListInContainer request. The method always
// closes the http.Response Body.
func (client RunArtifactsClient) ListInContainerResponder(resp *http.Response) (result PaginatedArtifactList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listInContainerNextResults retrieves the next set of results, if any.
func (client RunArtifactsClient) listInContainerNextResults(ctx context.Context, lastResults PaginatedArtifactList) (result PaginatedArtifactList, err error) {
	req, err := lastResults.paginatedArtifactListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "listInContainerNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListInContainerSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "listInContainerNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListInContainerResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "listInContainerNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListInContainerComplete enumerates all values, automatically crossing page boundaries as required.
func (client RunArtifactsClient) ListInContainerComplete(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, continuationToken string) (result PaginatedArtifactListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/RunArtifactsClient.ListInContainer")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListInContainer(ctx, subscriptionID, resourceGroupName, workspaceName, experimentName, runID, continuationToken)
	return
}

// ListInPath get Artifacts in the provided path for a specific Run Id.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroupName - the Name of the resource group in which the workspace is located.
// workspaceName - the name of the workspace.
// experimentName - the experiment name.
// runID - the identifier of the Run.
// pathParameter - the Artifact Path.
// continuationToken - the Continuation Token.
func (client RunArtifactsClient) ListInPath(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, pathParameter string, continuationToken string) (result PaginatedArtifactListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/RunArtifactsClient.ListInPath")
		defer func() {
			sc := -1
			if result.pal.Response.Response != nil {
				sc = result.pal.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listInPathNextResults
	req, err := client.ListInPathPreparer(ctx, subscriptionID, resourceGroupName, workspaceName, experimentName, runID, pathParameter, continuationToken)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "ListInPath", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListInPathSender(req)
	if err != nil {
		result.pal.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "ListInPath", resp, "Failure sending request")
		return
	}

	result.pal, err = client.ListInPathResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "ListInPath", resp, "Failure responding to request")
		return
	}
	if result.pal.hasNextLink() && result.pal.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListInPathPreparer prepares the ListInPath request.
func (client RunArtifactsClient) ListInPathPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, pathParameter string, continuationToken string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"experimentName":    autorest.Encode("path", experimentName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"runId":             autorest.Encode("path", runID),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	queryParameters := map[string]interface{}{}
	if len(pathParameter) > 0 {
		queryParameters["path"] = autorest.Encode("query", pathParameter)
	}
	if len(continuationToken) > 0 {
		queryParameters["continuationToken"] = autorest.Encode("query", continuationToken)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/artifacts/path", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListInPathSender sends the ListInPath request. The method will close the
// http.Response Body if it receives an error.
func (client RunArtifactsClient) ListInPathSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListInPathResponder handles the response to the ListInPath request. The method always
// closes the http.Response Body.
func (client RunArtifactsClient) ListInPathResponder(resp *http.Response) (result PaginatedArtifactList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listInPathNextResults retrieves the next set of results, if any.
func (client RunArtifactsClient) listInPathNextResults(ctx context.Context, lastResults PaginatedArtifactList) (result PaginatedArtifactList, err error) {
	req, err := lastResults.paginatedArtifactListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "listInPathNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListInPathSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "listInPathNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListInPathResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "listInPathNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListInPathComplete enumerates all values, automatically crossing page boundaries as required.
func (client RunArtifactsClient) ListInPathComplete(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, pathParameter string, continuationToken string) (result PaginatedArtifactListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/RunArtifactsClient.ListInPath")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListInPath(ctx, subscriptionID, resourceGroupName, workspaceName, experimentName, runID, pathParameter, continuationToken)
	return
}

// ListSasByPrefix get SAS of an Artifact in the specified path.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroupName - the Name of the resource group in which the workspace is located.
// workspaceName - the name of the workspace.
// experimentName - the experiment name.
// runID - the identifier of the Run.
// pathParameter - the Artifact Path.
// continuationToken - the Continuation Token.
func (client RunArtifactsClient) ListSasByPrefix(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, pathParameter string, continuationToken string) (result PaginatedArtifactContentInformationListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/RunArtifactsClient.ListSasByPrefix")
		defer func() {
			sc := -1
			if result.pacil.Response.Response != nil {
				sc = result.pacil.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listSasByPrefixNextResults
	req, err := client.ListSasByPrefixPreparer(ctx, subscriptionID, resourceGroupName, workspaceName, experimentName, runID, pathParameter, continuationToken)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "ListSasByPrefix", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSasByPrefixSender(req)
	if err != nil {
		result.pacil.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "ListSasByPrefix", resp, "Failure sending request")
		return
	}

	result.pacil, err = client.ListSasByPrefixResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "ListSasByPrefix", resp, "Failure responding to request")
		return
	}
	if result.pacil.hasNextLink() && result.pacil.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListSasByPrefixPreparer prepares the ListSasByPrefix request.
func (client RunArtifactsClient) ListSasByPrefixPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, pathParameter string, continuationToken string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"experimentName":    autorest.Encode("path", experimentName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"runId":             autorest.Encode("path", runID),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	queryParameters := map[string]interface{}{}
	if len(pathParameter) > 0 {
		queryParameters["path"] = autorest.Encode("query", pathParameter)
	}
	if len(continuationToken) > 0 {
		queryParameters["continuationToken"] = autorest.Encode("query", continuationToken)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/artifacts/prefix/contentinfo", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSasByPrefixSender sends the ListSasByPrefix request. The method will close the
// http.Response Body if it receives an error.
func (client RunArtifactsClient) ListSasByPrefixSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListSasByPrefixResponder handles the response to the ListSasByPrefix request. The method always
// closes the http.Response Body.
func (client RunArtifactsClient) ListSasByPrefixResponder(resp *http.Response) (result PaginatedArtifactContentInformationList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listSasByPrefixNextResults retrieves the next set of results, if any.
func (client RunArtifactsClient) listSasByPrefixNextResults(ctx context.Context, lastResults PaginatedArtifactContentInformationList) (result PaginatedArtifactContentInformationList, err error) {
	req, err := lastResults.paginatedArtifactContentInformationListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "listSasByPrefixNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListSasByPrefixSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "listSasByPrefixNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListSasByPrefixResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunArtifactsClient", "listSasByPrefixNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListSasByPrefixComplete enumerates all values, automatically crossing page boundaries as required.
func (client RunArtifactsClient) ListSasByPrefixComplete(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, pathParameter string, continuationToken string) (result PaginatedArtifactContentInformationListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/RunArtifactsClient.ListSasByPrefix")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListSasByPrefix(ctx, subscriptionID, resourceGroupName, workspaceName, experimentName, runID, pathParameter, continuationToken)
	return
}
