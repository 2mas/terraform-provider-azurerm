package machinelearningservices

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"io"
	"net/http"
)

// HyperparameterTuningClient is the these APIs allow end users to manage Azure Machine Learning Services.
type HyperparameterTuningClient struct {
	BaseClient
}

// NewHyperparameterTuningClient creates an instance of the HyperparameterTuningClient client.
func NewHyperparameterTuningClient() HyperparameterTuningClient {
	return NewHyperparameterTuningClientWithBaseURI(DefaultBaseURI)
}

// NewHyperparameterTuningClientWithBaseURI creates an instance of the HyperparameterTuningClient client using a custom
// endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure
// stack).
func NewHyperparameterTuningClientWithBaseURI(baseURI string) HyperparameterTuningClient {
	return HyperparameterTuningClient{NewWithBaseURI(baseURI)}
}

// CancelExperiment cancel a HyperDrive Experiment.
// Parameters:
// armScope - the ARM scope passed in through URL with format:
// subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}.
// runID - hyperdrive run id to cancel.
// runHistoryHost - the host for run location.
func (client HyperparameterTuningClient) CancelExperiment(ctx context.Context, armScope string, runID string, runHistoryHost string) (result HyperDriveCancelExperimentResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/HyperparameterTuningClient.CancelExperiment")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CancelExperimentPreparer(ctx, armScope, runID, runHistoryHost)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.HyperparameterTuningClient", "CancelExperiment", nil, "Failure preparing request")
		return
	}

	resp, err := client.CancelExperimentSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.HyperparameterTuningClient", "CancelExperiment", resp, "Failure sending request")
		return
	}

	result, err = client.CancelExperimentResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.HyperparameterTuningClient", "CancelExperiment", resp, "Failure responding to request")
		return
	}

	return
}

// CancelExperimentPreparer prepares the CancelExperiment request.
func (client HyperparameterTuningClient) CancelExperimentPreparer(ctx context.Context, armScope string, runID string, runHistoryHost string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"armScope": armScope,
		"runId":    autorest.Encode("path", runID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/hyperdrive/v1.0/{armScope}/runs/{runId}/cancel", pathParameters))
	if len(runHistoryHost) > 0 {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithHeader("RunHistoryHost", autorest.String(runHistoryHost)))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CancelExperimentSender sends the CancelExperiment request. The method will close the
// http.Response Body if it receives an error.
func (client HyperparameterTuningClient) CancelExperimentSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CancelExperimentResponder handles the response to the CancelExperiment request. The method always
// closes the http.Response Body.
func (client HyperparameterTuningClient) CancelExperimentResponder(resp *http.Response) (result HyperDriveCancelExperimentResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CreateExperiment create a HyperDrive Experiment.
// Parameters:
// armScope - the ARM scope passed in through URL with format:
// subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}.
// config - the configuration file with experiment JSON content. A text file that is a JSON-serialized
// '#/definitions/HyperDriveCreateExperiment' object.
func (client HyperparameterTuningClient) CreateExperiment(ctx context.Context, armScope string, config io.ReadCloser) (result HyperDriveExperimentResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/HyperparameterTuningClient.CreateExperiment")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CreateExperimentPreparer(ctx, armScope, config)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.HyperparameterTuningClient", "CreateExperiment", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateExperimentSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.HyperparameterTuningClient", "CreateExperiment", resp, "Failure sending request")
		return
	}

	result, err = client.CreateExperimentResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.HyperparameterTuningClient", "CreateExperiment", resp, "Failure responding to request")
		return
	}

	return
}

// CreateExperimentPreparer prepares the CreateExperiment request.
func (client HyperparameterTuningClient) CreateExperimentPreparer(ctx context.Context, armScope string, config io.ReadCloser) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"armScope": armScope,
	}

	formDataParameters := map[string]interface{}{
		"config": config,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/hyperdrive/v1.0/{armScope}/runs", pathParameters),
		autorest.WithMultiPartFormData(formDataParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateExperimentSender sends the CreateExperiment request. The method will close the
// http.Response Body if it receives an error.
func (client HyperparameterTuningClient) CreateExperimentSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateExperimentResponder handles the response to the CreateExperiment request. The method always
// closes the http.Response Body.
func (client HyperparameterTuningClient) CreateExperimentResponder(resp *http.Response) (result HyperDriveExperimentResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
