package machinelearningservices

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"github.com/gofrs/uuid"
	"net/http"
)

// AssetsClient is the these APIs allow end users to manage Azure Machine Learning Services.
type AssetsClient struct {
	BaseClient
}

// NewAssetsClient creates an instance of the AssetsClient client.
func NewAssetsClient() AssetsClient {
	return NewAssetsClientWithBaseURI(DefaultBaseURI)
}

// NewAssetsClientWithBaseURI creates an instance of the AssetsClient client using a custom endpoint.  Use this when
// interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewAssetsClientWithBaseURI(baseURI string) AssetsClient {
	return AssetsClient{NewWithBaseURI(baseURI)}
}

// Create create an Asset from the provided payload.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroup - the Name of the resource group in which the workspace is located.
// workspace - the name of the workspace.
// asset - the Asset to be created.
func (client AssetsClient) Create(ctx context.Context, subscriptionID uuid.UUID, resourceGroup string, workspace string, asset *Asset) (result Asset, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AssetsClient.Create")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: asset,
			Constraints: []validation.Constraint{{Target: "asset", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "asset.Name", Name: validation.Null, Rule: true, Chain: nil}}}}}}); err != nil {
		return result, validation.NewError("machinelearningservices.AssetsClient", "Create", err.Error())
	}

	req, err := client.CreatePreparer(ctx, subscriptionID, resourceGroup, workspace, asset)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.AssetsClient", "Create", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.AssetsClient", "Create", resp, "Failure sending request")
		return
	}

	result, err = client.CreateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.AssetsClient", "Create", resp, "Failure responding to request")
		return
	}

	return
}

// CreatePreparer prepares the Create request.
func (client AssetsClient) CreatePreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroup string, workspace string, asset *Asset) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroup":  autorest.Encode("path", resourceGroup),
		"subscriptionId": autorest.Encode("path", subscriptionID),
		"workspace":      autorest.Encode("path", workspace),
	}

	asset.CreatedTime = nil
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets", pathParameters))
	if asset != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(asset))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client AssetsClient) CreateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client AssetsClient) CreateResponder(resp *http.Response) (result Asset, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete delete the specified Asset.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroup - the Name of the resource group in which the workspace is located.
// workspace - the name of the workspace.
// ID - the Id of the Asset to delete.
func (client AssetsClient) Delete(ctx context.Context, subscriptionID uuid.UUID, resourceGroup string, workspace string, ID string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AssetsClient.Delete")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeletePreparer(ctx, subscriptionID, resourceGroup, workspace, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.AssetsClient", "Delete", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "machinelearningservices.AssetsClient", "Delete", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.AssetsClient", "Delete", resp, "Failure responding to request")
		return
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client AssetsClient) DeletePreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroup string, workspace string, ID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id":             autorest.Encode("path", ID),
		"resourceGroup":  autorest.Encode("path", resourceGroup),
		"subscriptionId": autorest.Encode("path", subscriptionID),
		"workspace":      autorest.Encode("path", workspace),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets/{id}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client AssetsClient) DeleteSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client AssetsClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ListQuery if no filter is passed, the query lists all the Assets in the given workspace. The returned list is
// paginated and the count of items in each page is an optional parameter.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroup - the Name of the resource group in which the workspace is located.
// workspace - the name of the workspace.
// runID - the run Id associated with the Assets.
// name - the object name.
// count - the number of items to retrieve in a page.
// skipToken - the continuation token to retrieve the next page.
// tags - a set of tags with which to filter the returned models.
// It is a comma separated string of tags key or tags key=value
// Example: tagKey1,tagKey2,tagKey3=value3
// properties - a set of properties with which to filter the returned models.
// It is a comma separated string of properties key and/or properties key=value
// Example: propKey1,propKey2,propKey3=value3
// orderby - an option for specifying how to order the list.
func (client AssetsClient) ListQuery(ctx context.Context, subscriptionID uuid.UUID, resourceGroup string, workspace string, runID string, name string, count *int32, skipToken string, tags string, properties string, orderby string) (result PaginatedAssetListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AssetsClient.ListQuery")
		defer func() {
			sc := -1
			if result.pal.Response.Response != nil {
				sc = result.pal.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listQueryNextResults
	req, err := client.ListQueryPreparer(ctx, subscriptionID, resourceGroup, workspace, runID, name, count, skipToken, tags, properties, orderby)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.AssetsClient", "ListQuery", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListQuerySender(req)
	if err != nil {
		result.pal.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.AssetsClient", "ListQuery", resp, "Failure sending request")
		return
	}

	result.pal, err = client.ListQueryResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.AssetsClient", "ListQuery", resp, "Failure responding to request")
		return
	}
	if result.pal.hasNextLink() && result.pal.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListQueryPreparer prepares the ListQuery request.
func (client AssetsClient) ListQueryPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroup string, workspace string, runID string, name string, count *int32, skipToken string, tags string, properties string, orderby string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroup":  autorest.Encode("path", resourceGroup),
		"subscriptionId": autorest.Encode("path", subscriptionID),
		"workspace":      autorest.Encode("path", workspace),
	}

	queryParameters := map[string]interface{}{}
	if len(runID) > 0 {
		queryParameters["runId"] = autorest.Encode("query", runID)
	}
	if len(name) > 0 {
		queryParameters["name"] = autorest.Encode("query", name)
	}
	if count != nil {
		queryParameters["count"] = autorest.Encode("query", *count)
	}
	if len(skipToken) > 0 {
		queryParameters["$skipToken"] = autorest.Encode("query", skipToken)
	}
	if len(tags) > 0 {
		queryParameters["tags"] = autorest.Encode("query", tags)
	}
	if len(properties) > 0 {
		queryParameters["properties"] = autorest.Encode("query", properties)
	}
	if len(string(orderby)) > 0 {
		queryParameters["orderby"] = autorest.Encode("query", orderby)
	} else {
		queryParameters["orderby"] = autorest.Encode("query", "CreatedAtDesc")
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListQuerySender sends the ListQuery request. The method will close the
// http.Response Body if it receives an error.
func (client AssetsClient) ListQuerySender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListQueryResponder handles the response to the ListQuery request. The method always
// closes the http.Response Body.
func (client AssetsClient) ListQueryResponder(resp *http.Response) (result PaginatedAssetList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listQueryNextResults retrieves the next set of results, if any.
func (client AssetsClient) listQueryNextResults(ctx context.Context, lastResults PaginatedAssetList) (result PaginatedAssetList, err error) {
	req, err := lastResults.paginatedAssetListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "machinelearningservices.AssetsClient", "listQueryNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListQuerySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "machinelearningservices.AssetsClient", "listQueryNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListQueryResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.AssetsClient", "listQueryNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListQueryComplete enumerates all values, automatically crossing page boundaries as required.
func (client AssetsClient) ListQueryComplete(ctx context.Context, subscriptionID uuid.UUID, resourceGroup string, workspace string, runID string, name string, count *int32, skipToken string, tags string, properties string, orderby string) (result PaginatedAssetListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AssetsClient.ListQuery")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListQuery(ctx, subscriptionID, resourceGroup, workspace, runID, name, count, skipToken, tags, properties, orderby)
	return
}

// Patch patch a specific Asset.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroup - the Name of the resource group in which the workspace is located.
// workspace - the name of the workspace.
// ID - the Id of the Asset to patch.
// patch - the payload that is used to patch an Asset.
func (client AssetsClient) Patch(ctx context.Context, subscriptionID uuid.UUID, resourceGroup string, workspace string, ID string, patch []JSONPatchOperation) (result Asset, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AssetsClient.Patch")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: patch,
			Constraints: []validation.Constraint{{Target: "patch", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("machinelearningservices.AssetsClient", "Patch", err.Error())
	}

	req, err := client.PatchPreparer(ctx, subscriptionID, resourceGroup, workspace, ID, patch)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.AssetsClient", "Patch", nil, "Failure preparing request")
		return
	}

	resp, err := client.PatchSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.AssetsClient", "Patch", resp, "Failure sending request")
		return
	}

	result, err = client.PatchResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.AssetsClient", "Patch", resp, "Failure responding to request")
		return
	}

	return
}

// PatchPreparer prepares the Patch request.
func (client AssetsClient) PatchPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroup string, workspace string, ID string, patch []JSONPatchOperation) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id":             autorest.Encode("path", ID),
		"resourceGroup":  autorest.Encode("path", resourceGroup),
		"subscriptionId": autorest.Encode("path", subscriptionID),
		"workspace":      autorest.Encode("path", workspace),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json-patch+json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets/{id}", pathParameters),
		autorest.WithJSON(patch))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// PatchSender sends the Patch request. The method will close the
// http.Response Body if it receives an error.
func (client AssetsClient) PatchSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PatchResponder handles the response to the Patch request. The method always
// closes the http.Response Body.
func (client AssetsClient) PatchResponder(resp *http.Response) (result Asset, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// QueryByID get an Asset by Id.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroup - the Name of the resource group in which the workspace is located.
// workspace - the name of the workspace.
// ID - the Asset Id.
func (client AssetsClient) QueryByID(ctx context.Context, subscriptionID uuid.UUID, resourceGroup string, workspace string, ID string) (result Asset, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AssetsClient.QueryByID")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.QueryByIDPreparer(ctx, subscriptionID, resourceGroup, workspace, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.AssetsClient", "QueryByID", nil, "Failure preparing request")
		return
	}

	resp, err := client.QueryByIDSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.AssetsClient", "QueryByID", resp, "Failure sending request")
		return
	}

	result, err = client.QueryByIDResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.AssetsClient", "QueryByID", resp, "Failure responding to request")
		return
	}

	return
}

// QueryByIDPreparer prepares the QueryByID request.
func (client AssetsClient) QueryByIDPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroup string, workspace string, ID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id":             autorest.Encode("path", ID),
		"resourceGroup":  autorest.Encode("path", resourceGroup),
		"subscriptionId": autorest.Encode("path", subscriptionID),
		"workspace":      autorest.Encode("path", workspace),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets/{id}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// QueryByIDSender sends the QueryByID request. The method will close the
// http.Response Body if it receives an error.
func (client AssetsClient) QueryByIDSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// QueryByIDResponder handles the response to the QueryByID request. The method always
// closes the http.Response Body.
func (client AssetsClient) QueryByIDResponder(resp *http.Response) (result Asset, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
