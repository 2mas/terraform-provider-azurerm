package machinelearningservices

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"github.com/gofrs/uuid"
	"net/http"
)

// RunMetricsClient is the these APIs allow end users to manage Azure Machine Learning Services.
type RunMetricsClient struct {
	BaseClient
}

// NewRunMetricsClient creates an instance of the RunMetricsClient client.
func NewRunMetricsClient() RunMetricsClient {
	return NewRunMetricsClientWithBaseURI(DefaultBaseURI)
}

// NewRunMetricsClientWithBaseURI creates an instance of the RunMetricsClient client using a custom endpoint.  Use this
// when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewRunMetricsClientWithBaseURI(baseURI string) RunMetricsClient {
	return RunMetricsClient{NewWithBaseURI(baseURI)}
}

// BatchPost post Metrics to a specific Run Id.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroupName - the Name of the resource group in which the workspace is located.
// workspaceName - the name of the workspace.
// experimentName - the experiment name.
// runID - the identifier for a run.
// batchMetricDto - details of the Metrics which will be added to the Run Id.
func (client RunMetricsClient) BatchPost(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, batchMetricDto *BatchMetric) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/RunMetricsClient.BatchPost")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.BatchPostPreparer(ctx, subscriptionID, resourceGroupName, workspaceName, experimentName, runID, batchMetricDto)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunMetricsClient", "BatchPost", nil, "Failure preparing request")
		return
	}

	resp, err := client.BatchPostSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunMetricsClient", "BatchPost", resp, "Failure sending request")
		return
	}

	result, err = client.BatchPostResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunMetricsClient", "BatchPost", resp, "Failure responding to request")
		return
	}

	return
}

// BatchPostPreparer prepares the BatchPost request.
func (client RunMetricsClient) BatchPostPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, batchMetricDto *BatchMetric) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"experimentName":    autorest.Encode("path", experimentName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"runId":             autorest.Encode("path", runID),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/batch/metrics", pathParameters))
	if batchMetricDto != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(batchMetricDto))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// BatchPostSender sends the BatchPost request. The method will close the
// http.Response Body if it receives an error.
func (client RunMetricsClient) BatchPostSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// BatchPostResponder handles the response to the BatchPost request. The method always
// closes the http.Response Body.
func (client RunMetricsClient) BatchPostResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get get Metric details for a specific Metric Id.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroupName - the Name of the resource group in which the workspace is located.
// workspaceName - the name of the workspace.
// experimentName - the experiment name.
// metricID - the identifier for a Metric.
func (client RunMetricsClient) Get(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, metricID uuid.UUID) (result RunMetric, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/RunMetricsClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPreparer(ctx, subscriptionID, resourceGroupName, workspaceName, experimentName, metricID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunMetricsClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunMetricsClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunMetricsClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client RunMetricsClient) GetPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, metricID uuid.UUID) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"experimentName":    autorest.Encode("path", experimentName),
		"metricId":          autorest.Encode("path", metricID),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/metrics/{metricId}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client RunMetricsClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client RunMetricsClient) GetResponder(resp *http.Response) (result RunMetric, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetByQuery get all Run Metrics for the specific Experiment with the specified query filters.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroupName - the Name of the resource group in which the workspace is located.
// workspaceName - the name of the workspace.
// experimentName - the experiment name.
// queryParams - query Parameters for data sorting and filtering.
// mergeStrategyType - the type of merge strategy. Currently supported strategies are:
// None - all logged values are returned as individual metrics.
// MergeToVector - merges multiple values into a vector of values.
// Default - the system determines the behavior.
// mergeStrategyOptions - controls behavior of the merge strategy in certain cases; e.g. when a metric is not
// merged.
// mergeStrategySettingsVersion - the strategy settings version.
// mergeStrategySettingsSelectMetrics - defines how to select metrics when merging them together.
func (client RunMetricsClient) GetByQuery(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, queryParams *QueryParams, mergeStrategyType string, mergeStrategyOptions string, mergeStrategySettingsVersion string, mergeStrategySettingsSelectMetrics string) (result PaginatedRunMetricListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/RunMetricsClient.GetByQuery")
		defer func() {
			sc := -1
			if result.prml.Response.Response != nil {
				sc = result.prml.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.getByQueryNextResults
	req, err := client.GetByQueryPreparer(ctx, subscriptionID, resourceGroupName, workspaceName, experimentName, queryParams, mergeStrategyType, mergeStrategyOptions, mergeStrategySettingsVersion, mergeStrategySettingsSelectMetrics)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunMetricsClient", "GetByQuery", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetByQuerySender(req)
	if err != nil {
		result.prml.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunMetricsClient", "GetByQuery", resp, "Failure sending request")
		return
	}

	result.prml, err = client.GetByQueryResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunMetricsClient", "GetByQuery", resp, "Failure responding to request")
		return
	}
	if result.prml.hasNextLink() && result.prml.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// GetByQueryPreparer prepares the GetByQuery request.
func (client RunMetricsClient) GetByQueryPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, queryParams *QueryParams, mergeStrategyType string, mergeStrategyOptions string, mergeStrategySettingsVersion string, mergeStrategySettingsSelectMetrics string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"experimentName":    autorest.Encode("path", experimentName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	queryParameters := map[string]interface{}{}
	if len(string(mergeStrategyType)) > 0 {
		queryParameters["MergeStrategyType"] = autorest.Encode("query", mergeStrategyType)
	}
	if len(string(mergeStrategyOptions)) > 0 {
		queryParameters["MergeStrategyOptions"] = autorest.Encode("query", mergeStrategyOptions)
	}
	if len(mergeStrategySettingsVersion) > 0 {
		queryParameters["MergeStrategySettings.Version"] = autorest.Encode("query", mergeStrategySettingsVersion)
	}
	if len(string(mergeStrategySettingsSelectMetrics)) > 0 {
		queryParameters["MergeStrategySettings.SelectMetrics"] = autorest.Encode("query", mergeStrategySettingsSelectMetrics)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/metrics:query", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	if queryParams != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(queryParams))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetByQuerySender sends the GetByQuery request. The method will close the
// http.Response Body if it receives an error.
func (client RunMetricsClient) GetByQuerySender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetByQueryResponder handles the response to the GetByQuery request. The method always
// closes the http.Response Body.
func (client RunMetricsClient) GetByQueryResponder(resp *http.Response) (result PaginatedRunMetricList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// getByQueryNextResults retrieves the next set of results, if any.
func (client RunMetricsClient) getByQueryNextResults(ctx context.Context, lastResults PaginatedRunMetricList) (result PaginatedRunMetricList, err error) {
	req, err := lastResults.paginatedRunMetricListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "machinelearningservices.RunMetricsClient", "getByQueryNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.GetByQuerySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "machinelearningservices.RunMetricsClient", "getByQueryNextResults", resp, "Failure sending next results request")
	}
	result, err = client.GetByQueryResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunMetricsClient", "getByQueryNextResults", resp, "Failure responding to next results request")
	}
	return
}

// GetByQueryComplete enumerates all values, automatically crossing page boundaries as required.
func (client RunMetricsClient) GetByQueryComplete(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, queryParams *QueryParams, mergeStrategyType string, mergeStrategyOptions string, mergeStrategySettingsVersion string, mergeStrategySettingsSelectMetrics string) (result PaginatedRunMetricListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/RunMetricsClient.GetByQuery")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.GetByQuery(ctx, subscriptionID, resourceGroupName, workspaceName, experimentName, queryParams, mergeStrategyType, mergeStrategyOptions, mergeStrategySettingsVersion, mergeStrategySettingsSelectMetrics)
	return
}

// Post post a Metric to a specific Run Id.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroupName - the Name of the resource group in which the workspace is located.
// workspaceName - the name of the workspace.
// experimentName - the experiment name.
// runID - the identifier for a run.
// metricDto - details of the metric which will be added to the Run Id.
func (client RunMetricsClient) Post(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, metricDto *Metric) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/RunMetricsClient.Post")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.PostPreparer(ctx, subscriptionID, resourceGroupName, workspaceName, experimentName, runID, metricDto)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunMetricsClient", "Post", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunMetricsClient", "Post", resp, "Failure sending request")
		return
	}

	result, err = client.PostResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.RunMetricsClient", "Post", resp, "Failure responding to request")
		return
	}

	return
}

// PostPreparer prepares the Post request.
func (client RunMetricsClient) PostPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, metricDto *Metric) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"experimentName":    autorest.Encode("path", experimentName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"runId":             autorest.Encode("path", runID),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/metrics", pathParameters))
	if metricDto != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(metricDto))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// PostSender sends the Post request. The method will close the
// http.Response Body if it receives an error.
func (client RunMetricsClient) PostSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostResponder handles the response to the Post request. The method always
// closes the http.Response Body.
func (client RunMetricsClient) PostResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}
