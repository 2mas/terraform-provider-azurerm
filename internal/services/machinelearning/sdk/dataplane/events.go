package machinelearningservices

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"github.com/gofrs/uuid"
	"net/http"
)

// EventsClient is the these APIs allow end users to manage Azure Machine Learning Services.
type EventsClient struct {
	BaseClient
}

// NewEventsClient creates an instance of the EventsClient client.
func NewEventsClient() EventsClient {
	return NewEventsClientWithBaseURI(DefaultBaseURI)
}

// NewEventsClientWithBaseURI creates an instance of the EventsClient client using a custom endpoint.  Use this when
// interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewEventsClientWithBaseURI(baseURI string) EventsClient {
	return EventsClient{NewWithBaseURI(baseURI)}
}

// BatchPost post event data to a specific Run Id.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroupName - the Name of the resource group in which the workspace is located.
// workspaceName - the name of the workspace.
// experimentName - the experiment name.
// batchEventCommand - the batch of Event details.
func (client EventsClient) BatchPost(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, batchEventCommand *BatchEventCommand) (result BatchEventCommandResult, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/EventsClient.BatchPost")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.BatchPostPreparer(ctx, subscriptionID, resourceGroupName, workspaceName, experimentName, batchEventCommand)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.EventsClient", "BatchPost", nil, "Failure preparing request")
		return
	}

	resp, err := client.BatchPostSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "machinelearningservices.EventsClient", "BatchPost", resp, "Failure sending request")
		return
	}

	result, err = client.BatchPostResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.EventsClient", "BatchPost", resp, "Failure responding to request")
		return
	}

	return
}

// BatchPostPreparer prepares the BatchPost request.
func (client EventsClient) BatchPostPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, batchEventCommand *BatchEventCommand) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"experimentName":    autorest.Encode("path", experimentName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/batch/events", pathParameters))
	if batchEventCommand != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(batchEventCommand))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// BatchPostSender sends the BatchPost request. The method will close the
// http.Response Body if it receives an error.
func (client EventsClient) BatchPostSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// BatchPostResponder handles the response to the BatchPost request. The method always
// closes the http.Response Body.
func (client EventsClient) BatchPostResponder(resp *http.Response) (result BatchEventCommandResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Post post event data to a specific Run Id.
// Parameters:
// subscriptionID - the Azure Subscription ID.
// resourceGroupName - the Name of the resource group in which the workspace is located.
// workspaceName - the name of the workspace.
// experimentName - the experiment name.
// runID - the identifier of the Run.
// eventMessage - the Event details.
func (client EventsClient) Post(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, eventMessage *BaseEvent) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/EventsClient.Post")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.PostPreparer(ctx, subscriptionID, resourceGroupName, workspaceName, experimentName, runID, eventMessage)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.EventsClient", "Post", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "machinelearningservices.EventsClient", "Post", resp, "Failure sending request")
		return
	}

	result, err = client.PostResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "machinelearningservices.EventsClient", "Post", resp, "Failure responding to request")
		return
	}

	return
}

// PostPreparer prepares the Post request.
func (client EventsClient) PostPreparer(ctx context.Context, subscriptionID uuid.UUID, resourceGroupName string, workspaceName string, experimentName string, runID string, eventMessage *BaseEvent) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"experimentName":    autorest.Encode("path", experimentName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"runId":             autorest.Encode("path", runID),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/events", pathParameters))
	if eventMessage != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(eventMessage))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// PostSender sends the Post request. The method will close the
// http.Response Body if it receives an error.
func (client EventsClient) PostSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostResponder handles the response to the Post request. The method always
// closes the http.Response Body.
func (client EventsClient) PostResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}
